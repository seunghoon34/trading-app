
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trading-network

  # User Management Service
  user-management:
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    container_name: user-management-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - trading-network
  
  # Trading Market Data Service
  market-data:
    build:
      context: ./services/market-data
      dockerfile: Dockerfile
    container_name: market-data-service
    environment:
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_MARKET_DATA_URL=${ALPACA_MARKET_DATA_URL}
    ports:
      - "8082:8082"
    networks:
      - trading-network
  # Trading Engine Service
  trading-engine:
    build:
      context: ./services/trading-engine
      dockerfile: Dockerfile
    container_name: trading-engine-service
    environment:
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    ports:
      - "8083:8083"
    networks:
      - trading-network
  # Portfolio Service
  portfolio:
    build:
      context: ./services/portfolio
      dockerfile: Dockerfile
    container_name: portfolio-service
    environment:
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
    ports:
      - "8084:8084"
    networks:
      - trading-network
  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-service
    ports:
      - "3000:3000"
    depends_on:
      - user-management
      - market-data
      - trading-engine
      - portfolio
    networks:
      - trading-network
  # ELK Stack Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./infrastructure/logstash/pipeline:/usr/share/logstash/pipeline
      - ./infrastructure/logstash/config:/usr/share/logstash/config
    networks:
      - trading-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - trading-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat
    user: root
    volumes:
      - ./infrastructure/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - trading-network
    depends_on:
      logstash:
        condition: service_healthy
    command: filebeat -e -strict.perms=false

# Define network for service communication
networks:
  trading-network:
    driver: bridge

# Define volumes for data persistence
volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local